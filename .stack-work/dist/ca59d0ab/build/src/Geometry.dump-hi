
==================== FINAL INTERFACE ====================
2017-03-25 09:42:23.6308237 UTC

interface squigly-trace-0.1.0.0-B2tPeVU0dH9BfPKJegt0x3:Geometry 8002
  interface hash: 952db65b55777da8251db6224584d82a
  ABI hash: 85cd1ee946afd97989b05e2f68a8f17e
  export-list hash: 83974f313d1690297b560e870dbbf42c
  orphan hash: 318a1e572174c87a300fdde5d9f757ab
  flag hash: ff109124cfc5c6538fb1b79e319c5cea
  sig of: Nothing
  used TH splices: False
  where
exports:
  Geometry.normal
  Geometry.rotMatrixRads
  Geometry.rotVert
  Geometry.Ray{Geometry.Ray bounces direction vertex}
  Geometry.Scene{Geometry.Scene tris}
  Geometry.Triangle{Geometry.Triangle material tFirst tSecond tThird}
module dependencies: Color
package dependencies: StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      Win32-2.3.1.1@Win32-2.3.1.1
                      adjunctions-4.3@adjunctions-4.3-5CqTSM7liCdC9cb4N2IolK
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.5.4@base-orphans-0.5.4-ABoxiBf7nXc7Qqh66CgYc9
                      bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN
                      binary-0.8.3.0@binary-0.8.3.0
                      bytes-0.15.2@bytes-0.15.2-CoxH8CioAOK8h6CcNcuhd
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      cereal-0.5.4.0@cereal-0.5.4.0-BsAGxfp8yAs3CiRo2E875e
                      comonad-5@comonad-5-ETWy8l913C0Kq2HEAZg6Cb
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-ETyVlWBlFwj93UDOdH22No
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.2@distributive-0.5.2-JCgfTXNR3ywAyV7fFWIBI5
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      free-4.12.4@free-4.12.4-Ab5EFvlPq2CHsY4aRoQQaZ
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.5.0@hashable-1.2.5.0-F4MWeNuv2sjJRqBd2T5ul4
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.1@integer-logarithms-1.0.1-IEHCuEd5sG4JjSjlx7m5JF
                      kan-extensions-5.0.1@kan-extensions-5.0.1-11Ov83x9jJMC3tpuqa2lhG
                      lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi
                      linear-1.20.5@linear-1.20.5-CEAsJizrl7jL0iAxtpGqYP
                      loop-0.3.0@loop-0.3.0-4tGn4RSY02pFTwJ5L4CYRr
                      matrix-0.3.5.0@matrix-0.3.5.0-eFZR6K8Lax4OrNeuTQF4y
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-BhL9U5k7NtGJn1itwIHt2Y
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      profunctors-5.2@profunctors-5.2-LrJGukLpH0xCNgg3bhdC7E
                      reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4
                      scientific-0.3.4.10@scientific-0.3.4.10-HRQd1hS6vMV6hvjSlMi8B0
                      semigroupoids-5.1@semigroupoids-5.1-Bv4gPJlZIgxJuJyrAzyy1i
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.7.2@unordered-containers-0.2.7.2-8AmrySQXjRGF6VciYs51fM
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.5.0@hashable-1.2.5.0-F4MWeNuv2sjJRqBd2T5ul4:Data.Hashable.Generic
         linear-1.20.5@linear-1.20.5-CEAsJizrl7jL0iAxtpGqYP:Linear.Instances
         reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-5CqTSM7liCdC9cb4N2IolK:Data.Functor.Rep
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Biff
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Clown
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Flip
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Join
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Joker
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Product
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Sum
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Tannen
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Wrapped
                         bytes-0.15.2@bytes-0.15.2-CoxH8CioAOK8h6CcNcuhd:Data.Bytes.Get
                         bytes-0.15.2@bytes-0.15.2-CoxH8CioAOK8h6CcNcuhd:Data.Bytes.Signed
                         bytes-0.15.2@bytes-0.15.2-CoxH8CioAOK8h6CcNcuhd:Data.Bytes.VarInt
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.1@kan-extensions-5.0.1-11Ov83x9jJMC3tpuqa2lhG:Data.Functor.Day
                         kan-extensions-5.0.1@kan-extensions-5.0.1-11Ov83x9jJMC3tpuqa2lhG:Data.Functor.Yoneda
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.At
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Internal.Indexed
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Reified
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Tuple
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Wrapped
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Zoom
                         linear-1.20.5@linear-1.20.5-CEAsJizrl7jL0iAxtpGqYP:Linear.V1
                         linear-1.20.5@linear-1.20.5-CEAsJizrl7jL0iAxtpGqYP:Linear.V2
                         linear-1.20.5@linear-1.20.5-CEAsJizrl7jL0iAxtpGqYP:Linear.V3
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         profunctors-5.2@profunctors-5.2-LrJGukLpH0xCNgg3bhdC7E:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         unordered-containers-0.2.7.2@unordered-containers-0.2.7.2-8AmrySQXjRGF6VciYs51fM:Data.HashMap.Base
                         unordered-containers-0.2.7.2@unordered-containers-0.2.7.2-8AmrySQXjRGF6VciYs51fM:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Float b620368aab866c2bb9d3a0a459566b84
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  linear-1.20.5@linear-1.20.5-CEAsJizrl7jL0iAxtpGqYP:Linear.V3 2c30ff802e0fec4e882aac9ad5111240
import  -/  matrix-0.3.5.0@matrix-0.3.5.0-eFZR6K8Lax4OrNeuTQF4y:Data.Matrix 2de8b1528e8778fd4bf7452f8e58a0dc
import  -/  Color 00774378ee26a135ff33270dcc96368a
  exports: 0920e717bff7429c34f3db94393079a6
  Material 3e575c70247c8c8f412f89aa1a81fb0c
0f563539952d932fde2464ac8431111c
  $fShowRay :: GHC.Show.Show Geometry.Ray
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Geometry.Ray
                  Geometry.$fShowRay_$cshowsPrec
                  Geometry.$fShowRay_$cshow
                  Geometry.$fShowRay_$cshowList -}
0f563539952d932fde2464ac8431111c
  $fShowRay1 :: Geometry.Ray -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Geometry.Ray) ->
                 case w of ww { Geometry.Ray ww1 ww2 ww3 ->
                 Geometry.$w$cshowsPrec 0# ww1 ww2 ww3 }) -}
807a588508500c29c14d13b954bd468c
  $fShowRay2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
e61647f7e1d8dbc94aa5dcb075cff08a
  $fShowRay3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "bounces = "#) -}
ded8d416cad25497281788c967488cec
  $fShowRay4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "direction = "#) -}
eac159e875ac21fdd2b57b0b8821a2e1
  $fShowRay5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
e44373db8da0a4a1678e577014e3cdaf
  $fShowRay6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "vertex = "#) -}
caf0a18b9f5f56203119a5fa9901c24d
  $fShowRay7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ray {"#) -}
0f563539952d932fde2464ac8431111c
  $fShowRay_$cshow :: Geometry.Ray -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U,U),1*U(U,U,U),U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Geometry.Ray) ->
                 Geometry.$fShowRay_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0f563539952d932fde2464ac8431111c
  $fShowRay_$cshowList :: [Geometry.Ray] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Geometry.Ray
                   Geometry.$fShowRay1) -}
0f563539952d932fde2464ac8431111c
  $fShowRay_$cshowsPrec ::
    GHC.Types.Int -> Geometry.Ray -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U,U),1*U(U,U,U),U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Geometry.Ray) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Geometry.Ray ww3 ww4 ww5 ->
                 Geometry.$w$cshowsPrec ww1 ww3 ww4 ww5 } }) -}
643152448e00f7088428d90cecb4c2fb
  $fShowScene :: GHC.Show.Show Geometry.Scene
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Geometry.Scene
                  Geometry.$fShowScene_$cshowsPrec
                  Geometry.$fShowScene_$cshow
                  Geometry.$fShowScene_$cshowList -}
643152448e00f7088428d90cecb4c2fb
  $fShowScene1 :: Geometry.Scene -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Geometry.Scene) (w1 :: GHC.Base.String) ->
                 case w of ww { Geometry.Scene ww1 ->
                 Geometry.$w$cshowsPrec1 0# ww1 w1 }) -}
e62a116e1a00a0063545ae6ca8a41d1a
  $fShowScene2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Triangle {"#) -}
472a8442b63c00cb44777f4187dd6c7b
  $fShowScene3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "material = "#) -}
7e4584960d61c94150990add7fcaf373
  $fShowScene4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "tThird = "#) -}
054efce64838adcf50ccb5ec7cc66bcf
  $fShowScene5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "tSecond = "#) -}
ccfe34ac87e320a768eb62a012bb58b3
  $fShowScene6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "tFirst = "#) -}
55edcd65637788c836e5a960334cc213
  $fShowScene7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "tris = "#) -}
3d9539b0c1a321d02b3d8a7220766755
  $fShowScene8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Scene {"#) -}
643152448e00f7088428d90cecb4c2fb
  $fShowScene_$cshow :: Geometry.Scene -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Geometry.Scene) ->
                 Geometry.$fShowScene_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
643152448e00f7088428d90cecb4c2fb
  $fShowScene_$cshowList :: [Geometry.Scene] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Geometry.Scene
                   Geometry.$fShowScene1) -}
643152448e00f7088428d90cecb4c2fb
  $fShowScene_$cshowsPrec ::
    GHC.Types.Int -> Geometry.Scene -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Geometry.Scene)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Geometry.Scene ww3 ->
                 Geometry.$w$cshowsPrec1 ww1 ww3 w2 } }) -}
bbc62165b6b74ea61ec439e4f5e222ba
  $fShowTriangle :: GHC.Show.Show Geometry.Triangle
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Geometry.Triangle
                  Geometry.$fShowTriangle_$cshowsPrec
                  Geometry.$fShowTriangle_$cshow
                  Geometry.$fShowTriangle_$cshowList -}
bbc62165b6b74ea61ec439e4f5e222ba
  $fShowTriangle1 :: Geometry.Triangle -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Geometry.Triangle) ->
                 case w of ww { Geometry.Triangle ww1 ww2 ww3 ww4 ->
                 Geometry.$w$cshowsPrec2 0# ww1 ww2 ww3 ww4 }) -}
bbc62165b6b74ea61ec439e4f5e222ba
  $fShowTriangle_$cshow :: Geometry.Triangle -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),U(U(U,U,U),U(U,U,U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Geometry.Triangle) ->
                 Geometry.$fShowTriangle_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bbc62165b6b74ea61ec439e4f5e222ba
  $fShowTriangle_$cshowList :: [Geometry.Triangle] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Geometry.Triangle
                   Geometry.$fShowTriangle1) -}
bbc62165b6b74ea61ec439e4f5e222ba
  $fShowTriangle_$cshowsPrec ::
    GHC.Types.Int -> Geometry.Triangle -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),U(U(U,U,U),U(U,U,U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Geometry.Triangle) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Geometry.Triangle ww3 ww4 ww5 ww6 ->
                 Geometry.$w$cshowsPrec2 ww1 ww3 ww4 ww5 ww6 } }) -}
983351c3db9269380fb6f56e2bf59285
  $s!_$slength :: Data.Vector.Vector GHC.Types.Float -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: [NEVER] -}
cec2ac7d0d2eac8a652763c54492f144
  $tc'Ray :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5833310862711117443##
                   14924793388992325063##
                   Geometry.$trModule
                   Geometry.$tc'Ray1) -}
42391a1e57e29b038e17f206df06047b
  $tc'Ray1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Ray"#) -}
2b1f1d92ecc4c8ba274f7ef282b3666e
  $tc'Scene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10069709179816364600##
                   5970511230511057526##
                   Geometry.$trModule
                   Geometry.$tc'Scene1) -}
7150ad3cf5b0e3403394c1f93e5ba5be
  $tc'Scene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Scene"#) -}
03e05b03d8c5252790fe05d85ba7beba
  $tc'Triangle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14097368497853049142##
                   13232968257972075785##
                   Geometry.$trModule
                   Geometry.$tc'Triangle1) -}
645608746c2ff8bc6f52047cedc61b3d
  $tc'Triangle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Triangle"#) -}
93294beb847f63c9a1b3f2683755e21f
  $tcRay :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16518796189070723626##
                   1426040711275514321##
                   Geometry.$trModule
                   Geometry.$tcRay1) -}
384c08ab6eaa9f5287faa2bcb2a7bee0
  $tcRay1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Ray"#) -}
640e91345dfa3edf5dd4467a4a6ace03
  $tcScene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17668747903791574815##
                   10430985286898523527##
                   Geometry.$trModule
                   Geometry.$tcScene1) -}
f09eb0045175a79dff2c19fa005eba67
  $tcScene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Scene"#) -}
daabb78ee70986a5c099e60f0c4c1057
  $tcTriangle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14742890513233576885##
                   13320334873216144694##
                   Geometry.$trModule
                   Geometry.$tcTriangle1) -}
414e1d27f4117c55791711555b857c9a
  $tcTriangle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Triangle"#) -}
398b42fa58e20cc2666f3d0f4dc0454a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Geometry.$trModule2
                   Geometry.$trModule1) -}
eb7e08190d9ef60e1111ac555e8f9a1d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Geometry"#) -}
eedb2738ce06098b0d514e91c821d92a
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "squigly-trace-0.1.0.0-B2tPeVU0dH9BfPKJegt0x3"#) -}
cc13123bd523f97abe3e69f9357da6d7
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Linear.V3.V3 GHC.Types.Float
    -> Linear.V3.V3 GHC.Types.Float
    -> GHC.Types.Int
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,1*U(U,U,U)><L,1*U(U,U,U)><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Linear.V3.V3 GHC.Types.Float)
                   (ww2 :: Linear.V3.V3 GHC.Types.Float)
                   (ww3 :: GHC.Types.Int) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww4 { Linear.V3.V3 ww5 ww6 ww7 ->
                     Linear.V3.$w$cshowsPrec
                       @ GHC.Types.Float
                       GHC.Float.$fShowFloat
                       0#
                       ww5
                       ww6
                       ww7 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww4 { Linear.V3.V3 ww5 ww6 ww7 ->
                     Linear.V3.$w$cshowsPrec
                       @ GHC.Types.Float
                       GHC.Float.$fShowFloat
                       0#
                       ww5
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Geometry.$fShowRay7
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Geometry.$fShowRay6
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Geometry.$fShowRay5
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Geometry.$fShowRay4
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Geometry.$fShowRay5
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Geometry.$fShowRay3
                                            (case ww3 of ww4 { GHC.Types.I# ww5 ->
                                             case GHC.Show.$wshowSignedInt
                                                    0#
                                                    ww5
                                                    (GHC.Base.++
                                                       @ GHC.Types.Char
                                                       Geometry.$fShowRay2
                                                       x) of ww6 { (#,#) ww7 ww8 ->
                                             GHC.Types.: @ GHC.Types.Char ww7 ww8 } }))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
8f860dba4f3b56dfd177af14b3a734e8
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> [Geometry.Triangle] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Geometry.Triangle])
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Geometry.$fShowScene8
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Geometry.$fShowScene7
                          (let {
                             s :: GHC.Base.String
                             = GHC.Base.++ @ GHC.Types.Char Geometry.$fShowRay2 x
                           } in
                           case ww1 of wild {
                             [] -> GHC.CString.unpackAppendCString# "[]"# s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__2
                                  (case x1 of ww2 { Geometry.Triangle ww3 ww4 ww5 ww6 ->
                                   Geometry.$w$cshowsPrec2
                                     0#
                                     ww3
                                     ww4
                                     ww5
                                     ww6
                                     (let {
                                        lvl89 :: [GHC.Types.Char]
                                        = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 s
                                      } in
                                      letrec {
                                        showl :: [Geometry.Triangle] -> GHC.Base.String
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds2 :: [Geometry.Triangle]) ->
                                          case ds2 of wild1 {
                                            [] -> lvl89
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.shows5
                                                 (case y of ww7 { Geometry.Triangle ww8 ww9 ww10 ww11 ->
                                                  Geometry.$w$cshowsPrec2
                                                    0#
                                                    ww8
                                                    ww9
                                                    ww10
                                                    ww11
                                                    (showl ys) }) }
                                      } in
                                      showl xs) }) }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
f54ef186948cad62b91543e03818555d
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Linear.V3.V3 GHC.Types.Float
    -> Linear.V3.V3 GHC.Types.Float
    -> Linear.V3.V3 GHC.Types.Float
    -> Color.Material GHC.Types.Float
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,1*U(U,U,U)><L,1*U(U,U,U)><L,1*U(U,U,U)><L,U(U(U,U,U),U(U,U,U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Linear.V3.V3 GHC.Types.Float)
                   (ww2 :: Linear.V3.V3 GHC.Types.Float)
                   (ww3 :: Linear.V3.V3 GHC.Types.Float)
                   (ww4 :: Color.Material GHC.Types.Float) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Linear.V3.V3 ww6 ww7 ww8 ->
                     Linear.V3.$w$cshowsPrec
                       @ GHC.Types.Float
                       GHC.Float.$fShowFloat
                       0#
                       ww6
                       ww7
                       ww8 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww5 { Linear.V3.V3 ww6 ww7 ww8 ->
                     Linear.V3.$w$cshowsPrec
                       @ GHC.Types.Float
                       GHC.Float.$fShowFloat
                       0#
                       ww6
                       ww7
                       ww8 }
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = case ww3 of ww5 { Linear.V3.V3 ww6 ww7 ww8 ->
                     Linear.V3.$w$cshowsPrec
                       @ GHC.Types.Float
                       GHC.Float.$fShowFloat
                       0#
                       ww6
                       ww7
                       ww8 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Geometry.$fShowScene6
                       (f (GHC.Base.++
                             @ GHC.Types.Char
                             Geometry.$fShowRay5
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Geometry.$fShowScene5
                                (f1
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      Geometry.$fShowRay5
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Geometry.$fShowScene4
                                         (f2
                                            (GHC.Base.++
                                               @ GHC.Types.Char
                                               Geometry.$fShowRay5
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Geometry.$fShowScene3
                                                  (case ww4 of ww5 { Color.Mat ww6 ww7 ->
                                                   Color.$w$cshowsPrec
                                                     @ GHC.Types.Float
                                                     GHC.Float.$fShowFloat
                                                     0#
                                                     ww6
                                                     ww7
                                                     (GHC.Base.++
                                                        @ GHC.Types.Char
                                                        Geometry.$fShowRay2
                                                        x) }))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Geometry.$fShowScene2 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Geometry.$fShowScene2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
d482e774a091db1b5fcf1a8bbbf079f7
  $wgo ::
    [Data.Matrix.Matrix GHC.Types.Float]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector GHC.Types.Float
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#,
          GHC.Prim.Int#, Data.Vector.Vector GHC.Types.Float #)
  {- Arity: 7,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U><L,U(U,U,U)>,
     Inline: [0] -}
6a003f9ca8c3e77d0f53fedbcc91576a
  $wlvl ::
    [GHC.Types.Float]
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#,
          GHC.Prim.Int#, Data.Vector.Vector GHC.Types.Float #)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Float]) ->
                 (# 3#, 3#, 0#, 0#, 3#,
                    case GHC.Magic.runRW#
                           @ 'GHC.Types.PtrRepLifted
                           @ (Data.Vector.Vector GHC.Types.Float)
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.newArray#
                                   @ GHC.Types.Float
                                   @ (Control.Monad.Primitive.PrimState
                                        (GHC.ST.ST GHC.Prim.RealWorld))
                                   9#
                                   (Data.Vector.Mutable.uninitialised @ GHC.Types.Float)
                                   s1
                                     `cast`
                                   (GHC.Prim.State#
                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                            letrec {
                              $s$wfoldlM'_loop :: GHC.Prim.State# GHC.Prim.RealWorld
                                                  -> GHC.Prim.Int#
                                                  -> [GHC.Types.Float]
                                                  -> GHC.Prim.Int#
                                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                        GHC.Types.Int #)
                                {- Arity: 4, Strictness: <S,U><S,U><L,1*U><L,U> -}
                              = \ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                                  (sc1 :: GHC.Prim.Int#)
                                  (sc2 :: [GHC.Types.Float])
                                  (sc3 :: GHC.Prim.Int#) ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<=# sc1 0#) of wild1 {
                                  GHC.Types.False
                                  -> case sc2 of wild2 {
                                       [] -> (# sc, GHC.Types.I# sc3 #)
                                       : x xs1
                                       -> case GHC.Prim.writeArray#
                                                 @ (Control.Monad.Primitive.PrimState
                                                      (GHC.ST.ST GHC.Prim.RealWorld))
                                                 @ GHC.Types.Float
                                                 ipv1
                                                 sc3
                                                 x
                                                 sc
                                                   `cast`
                                                 (GHC.Prim.State#
                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                              <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                          $s$wfoldlM'_loop
                                            s'#
                                              `cast`
                                            (GHC.Prim.State#
                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))_R
                                            (GHC.Prim.-# sc1 1#)
                                            xs1
                                            (GHC.Prim.+# sc3 1#) } }
                                  GHC.Types.True -> (# sc, GHC.Types.I# sc3 #) }
                            } in
                            case $s$wfoldlM'_loop
                                   ipv
                                     `cast`
                                   (GHC.Prim.State#
                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                           <GHC.Prim.RealWorld>_N))_R
                                   9#
                                   w
                                   0# of ds2 { (#,#) ipv6 ipv7 ->
                            case ipv7 of dt5 { GHC.Types.I# dt6 ->
                            case GHC.Prim.unsafeFreezeArray#
                                   @ (Control.Monad.Primitive.PrimState
                                        (GHC.ST.ST GHC.Prim.RealWorld))
                                   @ GHC.Types.Float
                                   ipv1
                                   ipv6
                                     `cast`
                                   (GHC.Prim.State#
                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                <GHC.Prim.RealWorld>_N)))_R of ds4 { (#,#) ipv2 ipv3 ->
                            (# ipv2
                                 `cast`
                               (GHC.Prim.State#
                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                       <GHC.Prim.RealWorld>_N))_R,
                               Data.Vector.Vector
                                 @ GHC.Types.Float
                                 0#
                                 dt6
                                 ipv3 #) } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                    ipv2 } #)) -}
faa8855557c4ffd3c75c28c0c0913006
  $wrotMatrixRads ::
    GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#,
          GHC.Prim.Int#, Data.Vector.Vector GHC.Types.Float #)
  {- Arity: 3, Strictness: <L,U(U)><L,U(U)><L,U(U)>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Float)
                   (w1 :: GHC.Types.Float)
                   (w2 :: GHC.Types.Float) ->
                 case Geometry.$wlvl
                        (GHC.Types.:
                           @ GHC.Types.Float
                           (case w of wild { GHC.Types.F# x ->
                            GHC.Types.F# (GHC.Prim.cosFloat# x) })
                           (GHC.Types.:
                              @ GHC.Types.Float
                              (case w of wild { GHC.Types.F# x ->
                               GHC.Types.F# (GHC.Prim.negateFloat# (GHC.Prim.sinFloat# x)) })
                              (GHC.Types.:
                                 @ GHC.Types.Float
                                 Geometry.rotMatrixRads6
                                 (GHC.Types.:
                                    @ GHC.Types.Float
                                    (case w of wild { GHC.Types.F# x ->
                                     GHC.Types.F# (GHC.Prim.sinFloat# x) })
                                    (GHC.Types.:
                                       @ GHC.Types.Float
                                       (case w of wild { GHC.Types.F# x ->
                                        GHC.Types.F# (GHC.Prim.cosFloat# x) })
                                       Geometry.rotMatrixRads2))))) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Geometry.$wgo
                   (GHC.Types.:
                      @ (Data.Matrix.Matrix GHC.Types.Float)
                      (case Geometry.$wlvl
                              (GHC.Types.:
                                 @ GHC.Types.Float
                                 (case w1 of wild { GHC.Types.F# x ->
                                  GHC.Types.F# (GHC.Prim.cosFloat# x) })
                                 (GHC.Types.:
                                    @ GHC.Types.Float
                                    Geometry.rotMatrixRads6
                                    (GHC.Types.:
                                       @ GHC.Types.Float
                                       (case w1 of wild { GHC.Types.F# x ->
                                        GHC.Types.F# (GHC.Prim.sinFloat# x) })
                                       (GHC.Types.:
                                          @ GHC.Types.Float
                                          Geometry.rotMatrixRads6
                                          (GHC.Types.:
                                             @ GHC.Types.Float
                                             Geometry.rotMatrixRads1
                                             (GHC.Types.:
                                                @ GHC.Types.Float
                                                Geometry.rotMatrixRads6
                                                (GHC.Types.:
                                                   @ GHC.Types.Float
                                                   (case w1 of wild { GHC.Types.F# x ->
                                                    GHC.Types.F#
                                                      (GHC.Prim.negateFloat#
                                                         (GHC.Prim.sinFloat# x)) })
                                                   (GHC.Types.:
                                                      @ GHC.Types.Float
                                                      Geometry.rotMatrixRads6
                                                      (GHC.Types.:
                                                         @ GHC.Types.Float
                                                         (case w1 of wild { GHC.Types.F# x ->
                                                          GHC.Types.F# (GHC.Prim.cosFloat# x) })
                                                         (GHC.Types.[]
                                                            @ GHC.Types.Float)))))))))) of ww7 { (#,,,,,#) ww8 ww9 ww10 ww11 ww12 ww13 ->
                       Data.Matrix.M @ GHC.Types.Float ww8 ww9 ww10 ww11 ww12 ww13 })
                      (GHC.Types.:
                         @ (Data.Matrix.Matrix GHC.Types.Float)
                         (case Geometry.$wlvl
                                 (GHC.Types.:
                                    @ GHC.Types.Float
                                    Geometry.rotMatrixRads1
                                    (GHC.Types.:
                                       @ GHC.Types.Float
                                       Geometry.rotMatrixRads6
                                       (GHC.Types.:
                                          @ GHC.Types.Float
                                          Geometry.rotMatrixRads6
                                          (GHC.Types.:
                                             @ GHC.Types.Float
                                             Geometry.rotMatrixRads6
                                             (GHC.Types.:
                                                @ GHC.Types.Float
                                                (case w2 of wild { GHC.Types.F# x ->
                                                 GHC.Types.F# (GHC.Prim.cosFloat# x) })
                                                (GHC.Types.:
                                                   @ GHC.Types.Float
                                                   (case w2 of wild { GHC.Types.F# x ->
                                                    GHC.Types.F#
                                                      (GHC.Prim.negateFloat#
                                                         (GHC.Prim.sinFloat# x)) })
                                                   (GHC.Types.:
                                                      @ GHC.Types.Float
                                                      Geometry.rotMatrixRads6
                                                      (GHC.Types.:
                                                         @ GHC.Types.Float
                                                         (case w2 of wild { GHC.Types.F# x ->
                                                          GHC.Types.F# (GHC.Prim.sinFloat# x) })
                                                         (GHC.Types.:
                                                            @ GHC.Types.Float
                                                            (case w2 of wild { GHC.Types.F# x ->
                                                             GHC.Types.F# (GHC.Prim.cosFloat# x) })
                                                            (GHC.Types.[]
                                                               @ GHC.Types.Float)))))))))) of ww7 { (#,,,,,#) ww8 ww9 ww10 ww11 ww12 ww13 ->
                          Data.Matrix.M @ GHC.Types.Float ww8 ww9 ww10 ww11 ww12 ww13 })
                         (GHC.Types.[] @ (Data.Matrix.Matrix GHC.Types.Float))))
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
434eb79a3cfce62287d36a0ec145cd9d
  $wrotVert ::
    GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector GHC.Types.Float
    -> (# GHC.Types.Float, GHC.Types.Float, GHC.Types.Float #)
  {- Arity: 9,
     Strictness: <S,U><S,U><S,U><S,1*U><S,U><L,U><L,U><L,U><L,U(U,U,U)>,
     Inline: [0] -}
0f563539952d932fde2464ac8431111c
  data Ray
    = Ray {vertex :: Linear.V3.V3 GHC.Types.Float,
           direction :: Linear.V3.V3 GHC.Types.Float,
           bounces :: GHC.Types.Int}
643152448e00f7088428d90cecb4c2fb
  data Scene = Scene {tris :: [Geometry.Triangle]}
bbc62165b6b74ea61ec439e4f5e222ba
  data Triangle
    = Triangle {tFirst :: Linear.V3.V3 GHC.Types.Float,
                tSecond :: Linear.V3.V3 GHC.Types.Float,
                tThird :: Linear.V3.V3 GHC.Types.Float,
                material :: Color.Material GHC.Types.Float}
6319a3a1ddf88cd18459b9eb3fb5461d
  bounces :: Geometry.Ray -> GHC.Types.Int
  RecSel Left Geometry.Ray
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Geometry.Ray) ->
                 case ds of wild { Geometry.Ray ds1 ds2 ds3 -> ds3 }) -}
129c8453820768dc162a2785386f0a9c
  direction :: Geometry.Ray -> Linear.V3.V3 GHC.Types.Float
  RecSel Left Geometry.Ray
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Geometry.Ray) ->
                 case ds of wild { Geometry.Ray ds1 ds2 ds3 -> ds2 }) -}
1762c46e4667fdb5effd54e6d9ce17e4
  material :: Geometry.Triangle -> Color.Material GHC.Types.Float
  RecSel Left Geometry.Triangle
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLS),1*U(A,A,A,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Geometry.Triangle) ->
                 case ds of wild { Geometry.Triangle ds1 ds2 ds3 ds4 -> ds4 }) -}
985555aa75245504eb5c24d8d4c3c798
  normal :: Geometry.Triangle -> Linear.V3.V3 GHC.Types.Float
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(SSS)S(SSS)S(SSS)L),1*U(1*U(U(U),U(U),U(U)),1*U(U(U),U(U),U(U)),1*U(U(U),U(U),U(U)),A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Geometry.Triangle) ->
                 case w of ww { Geometry.Triangle ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Linear.V3.V3 ww6 ww7 ww8 ->
                 case ww6 of ww9 { GHC.Types.F# ww10 ->
                 case ww7 of ww11 { GHC.Types.F# ww12 ->
                 case ww8 of ww13 { GHC.Types.F# ww14 ->
                 case ww2 of ww15 { Linear.V3.V3 ww16 ww17 ww18 ->
                 case ww16 of ww19 { GHC.Types.F# ww20 ->
                 case ww17 of ww21 { GHC.Types.F# ww22 ->
                 case ww18 of ww23 { GHC.Types.F# ww24 ->
                 case ww3 of ww25 { Linear.V3.V3 ww26 ww27 ww28 ->
                 case ww26 of ww29 { GHC.Types.F# ww30 ->
                 case ww27 of ww31 { GHC.Types.F# ww32 ->
                 case ww28 of ww33 { GHC.Types.F# ww34 ->
                 let {
                   dt5 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww34 ww14
                 } in
                 let {
                   dt4 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww32 ww12
                 } in
                 let {
                   dt3 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww30 ww10
                 } in
                 let {
                   dt1 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww24 ww14
                 } in
                 let {
                   dt2 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww22 ww12
                 } in
                 let {
                   dt6 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww20 ww10
                 } in
                 Linear.V3.V3
                   @ GHC.Types.Float
                   (GHC.Types.F#
                      (GHC.Prim.minusFloat#
                         (GHC.Prim.timesFloat# dt2 dt5)
                         (GHC.Prim.timesFloat# dt1 dt4)))
                   (GHC.Types.F#
                      (GHC.Prim.minusFloat#
                         (GHC.Prim.timesFloat# dt1 dt3)
                         (GHC.Prim.timesFloat# dt6 dt5)))
                   (GHC.Types.F#
                      (GHC.Prim.minusFloat#
                         (GHC.Prim.timesFloat# dt6 dt4)
                         (GHC.Prim.timesFloat# dt2 dt3))) } } } } } } } } } } } } }) -}
386d47232387a8e26558dbfdc6c7b713
  rotMatrixRads ::
    GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> Data.Matrix.Matrix GHC.Types.Float
  {- Arity: 3, Strictness: <L,U(U)><L,U(U)><L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Float)
                   (w1 :: GHC.Types.Float)
                   (w2 :: GHC.Types.Float) ->
                 case Geometry.$wrotMatrixRads
                        w
                        w1
                        w2 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Data.Matrix.M @ GHC.Types.Float ww1 ww2 ww3 ww4 ww5 ww6 }) -}
b0ed7cc1f151273d0316b2186f2e83c0
  rotMatrixRads1 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 1.0#) -}
4f3806814ed5399b1e2ae5d26f6eb607
  rotMatrixRads2 :: [GHC.Types.Float]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Float
                   Geometry.rotMatrixRads6
                   Geometry.rotMatrixRads3) -}
276c0c713dbcce5933b13a4163f5ad6a
  rotMatrixRads3 :: [GHC.Types.Float]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Float
                   Geometry.rotMatrixRads6
                   Geometry.rotMatrixRads4) -}
1abd9eed2fe9049950de67c2f3b16568
  rotMatrixRads4 :: [GHC.Types.Float]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Float
                   Geometry.rotMatrixRads6
                   Geometry.rotMatrixRads5) -}
5cd6e75b5554f3cc71675d3ac8b3af3d
  rotMatrixRads5 :: [GHC.Types.Float]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Float
                   Geometry.rotMatrixRads1
                   (GHC.Types.[] @ GHC.Types.Float)) -}
8cc4c4c72ef046d224ecb217dd700cba
  rotMatrixRads6 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
a58ea87bc0f6193ae9982a8663f6df09
  rotVert ::
    Linear.V3.V3 GHC.Types.Float
    -> Data.Matrix.Matrix GHC.Types.Float
    -> Linear.V3.V3 GHC.Types.Float
  {- Arity: 2,
     Strictness: <S(SSS),1*U(U,U,U)><S(SSLLLL),1*U(1*U,U,U,U,U,U(U,U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Linear.V3.V3 GHC.Types.Float)
                   (w1 :: Data.Matrix.Matrix GHC.Types.Float) ->
                 case w of ww { Linear.V3.V3 ww1 ww2 ww3 ->
                 case w1 of ww4 { Data.Matrix.M ww5 ww6 ww7 ww8 ww9 ww10 ->
                 case Geometry.$wrotVert
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10 of ww11 { (#,,#) ww12 ww13 ww14 ->
                 Linear.V3.V3 @ GHC.Types.Float ww12 ww13 ww14 } } }) -}
ab7e81c9d9f4b92f528d8a7899a7c7bc
  tFirst :: Geometry.Triangle -> Linear.V3.V3 GHC.Types.Float
  RecSel Left Geometry.Triangle
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U,U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Geometry.Triangle) ->
                 case ds of wild { Geometry.Triangle ds1 ds2 ds3 ds4 -> ds1 }) -}
963f810f09fe70178e2ebd52685f08d9
  tSecond :: Geometry.Triangle -> Linear.V3.V3 GHC.Types.Float
  RecSel Left Geometry.Triangle
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Geometry.Triangle) ->
                 case ds of wild { Geometry.Triangle ds1 ds2 ds3 ds4 -> ds2 }) -}
b544e1709c17b8e1d3d8abb4964eaa26
  tThird :: Geometry.Triangle -> Linear.V3.V3 GHC.Types.Float
  RecSel Left Geometry.Triangle
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Geometry.Triangle) ->
                 case ds of wild { Geometry.Triangle ds1 ds2 ds3 ds4 -> ds3 }) -}
e592e6344f49b9f4df675e0f268e796e
  tris :: Geometry.Scene -> [Geometry.Triangle]
  RecSel Left Geometry.Scene
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Geometry.Scene) ->
                 case ds of wild { Geometry.Scene ds1 -> ds1 }) -}
c968b7e8b693f8e16346a417d84080b6
  vertex :: Geometry.Ray -> Linear.V3.V3 GHC.Types.Float
  RecSel Left Geometry.Ray
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Geometry.Ray) ->
                 case ds of wild { Geometry.Ray ds1 ds2 ds3 -> ds1 }) -}
instance GHC.Show.Show [Geometry.Ray] = Geometry.$fShowRay
instance GHC.Show.Show [Geometry.Scene] = Geometry.$fShowScene
instance GHC.Show.Show [Geometry.Triangle]
  = Geometry.$fShowTriangle
"SPEC/Geometry length @ Vector @ Float" [ALWAYS] forall ($dVector :: Data.Vector.Generic.Base.Vector
                                                                       Data.Vector.Vector
                                                                       GHC.Types.Float)
  Data.Vector.Generic.length @ Data.Vector.Vector
                             @ GHC.Types.Float
                             $dVector
  = Geometry.$s!_$slength
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

