
==================== FINAL INTERFACE ====================
2017-03-28 05:46:27.7858161 UTC

interface squigly-trace-0.1.0.0-5ozva8u4xtWJFkMKhtQb5C:Geometry 8002
  interface hash: 4d2629756e6c0a8739139a1d0e56e0a3
  ABI hash: 6ae82db36bfb21c714202b83d01a85c6
  export-list hash: 8a932d10486b5045b89ff092f241c3d3
  orphan hash: 36c40391677d33213591897fc13293fe
  flag hash: ff109124cfc5c6538fb1b79e319c5cea
  sig of: Nothing
  used TH splices: False
  where
exports:
  Geometry.dot
  Geometry.normal
  Geometry.pointInTriangle
  Geometry.rayFromVerts
  Geometry.rotMatrixRads
  Geometry.rotVert
  Geometry.rotate
  Geometry.Ray{Geometry.Ray bounces direction vertex}
  Geometry.Scene{Geometry.Scene tris}
  Geometry.Triangle{Geometry.Triangle material tFirst tSecond tThird}
module dependencies: Color
package dependencies: StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      Win32-2.3.1.1@Win32-2.3.1.1
                      adjunctions-4.3@adjunctions-4.3-5CqTSM7liCdC9cb4N2IolK
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.5.4@base-orphans-0.5.4-ABoxiBf7nXc7Qqh66CgYc9
                      bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN
                      binary-0.8.3.0@binary-0.8.3.0
                      bytes-0.15.2@bytes-0.15.2-CoxH8CioAOK8h6CcNcuhd
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      cereal-0.5.4.0@cereal-0.5.4.0-BsAGxfp8yAs3CiRo2E875e
                      comonad-5@comonad-5-ETWy8l913C0Kq2HEAZg6Cb
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-ETyVlWBlFwj93UDOdH22No
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.2@distributive-0.5.2-JCgfTXNR3ywAyV7fFWIBI5
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      free-4.12.4@free-4.12.4-Ab5EFvlPq2CHsY4aRoQQaZ
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.5.0@hashable-1.2.5.0-F4MWeNuv2sjJRqBd2T5ul4
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.1@integer-logarithms-1.0.1-IEHCuEd5sG4JjSjlx7m5JF
                      kan-extensions-5.0.1@kan-extensions-5.0.1-11Ov83x9jJMC3tpuqa2lhG
                      lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi
                      linear-1.20.5@linear-1.20.5-CEAsJizrl7jL0iAxtpGqYP
                      loop-0.3.0@loop-0.3.0-4tGn4RSY02pFTwJ5L4CYRr
                      matrix-0.3.5.0@matrix-0.3.5.0-eFZR6K8Lax4OrNeuTQF4y
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-BhL9U5k7NtGJn1itwIHt2Y
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      profunctors-5.2@profunctors-5.2-LrJGukLpH0xCNgg3bhdC7E
                      reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4
                      scientific-0.3.4.10@scientific-0.3.4.10-HRQd1hS6vMV6hvjSlMi8B0
                      semigroupoids-5.1@semigroupoids-5.1-Bv4gPJlZIgxJuJyrAzyy1i
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.7.2@unordered-containers-0.2.7.2-8AmrySQXjRGF6VciYs51fM
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.5.0@hashable-1.2.5.0-F4MWeNuv2sjJRqBd2T5ul4:Data.Hashable.Generic
         linear-1.20.5@linear-1.20.5-CEAsJizrl7jL0iAxtpGqYP:Linear.Instances
         reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-5CqTSM7liCdC9cb4N2IolK:Data.Functor.Rep
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Biff
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Clown
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Flip
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Join
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Joker
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Product
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Sum
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Tannen
                         bifunctors-5.4.1@bifunctors-5.4.1-B27lbd71hBJ2VXEJmV4sQN:Data.Bifunctor.Wrapped
                         bytes-0.15.2@bytes-0.15.2-CoxH8CioAOK8h6CcNcuhd:Data.Bytes.Get
                         bytes-0.15.2@bytes-0.15.2-CoxH8CioAOK8h6CcNcuhd:Data.Bytes.Signed
                         bytes-0.15.2@bytes-0.15.2-CoxH8CioAOK8h6CcNcuhd:Data.Bytes.VarInt
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.1@kan-extensions-5.0.1-11Ov83x9jJMC3tpuqa2lhG:Data.Functor.Day
                         kan-extensions-5.0.1@kan-extensions-5.0.1-11Ov83x9jJMC3tpuqa2lhG:Data.Functor.Yoneda
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.At
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Internal.Indexed
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Reified
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Tuple
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Wrapped
                         lens-4.15.1@lens-4.15.1-JIqePnD6ntW5ZEF4vrpOVi:Control.Lens.Zoom
                         linear-1.20.5@linear-1.20.5-CEAsJizrl7jL0iAxtpGqYP:Linear.V1
                         linear-1.20.5@linear-1.20.5-CEAsJizrl7jL0iAxtpGqYP:Linear.V2
                         linear-1.20.5@linear-1.20.5-CEAsJizrl7jL0iAxtpGqYP:Linear.V3
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         profunctors-5.2@profunctors-5.2-LrJGukLpH0xCNgg3bhdC7E:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         unordered-containers-0.2.7.2@unordered-containers-0.2.7.2-8AmrySQXjRGF6VciYs51fM:Data.HashMap.Base
                         unordered-containers-0.2.7.2@unordered-containers-0.2.7.2-8AmrySQXjRGF6VciYs51fM:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Float b620368aab866c2bb9d3a0a459566b84
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  linear-1.20.5@linear-1.20.5-CEAsJizrl7jL0iAxtpGqYP:Linear.V3 2c30ff802e0fec4e882aac9ad5111240
import  -/  matrix-0.3.5.0@matrix-0.3.5.0-eFZR6K8Lax4OrNeuTQF4y:Data.Matrix 2de8b1528e8778fd4bf7452f8e58a0dc
import  -/  Color ddb2eaa64cd3ea6c2a1f114fc7432b4c
  exports: a18670c5031df8c9fdb6927e5aecbbfe
  Material d0d97cf7966248f1fce2dae409fef618
17f90caa8c8a71eac0877e519bffae7b
  $fShowRay :: GHC.Show.Show Geometry.Ray
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Geometry.Ray
                  Geometry.$fShowRay_$cshowsPrec
                  Geometry.$fShowRay_$cshow
                  Geometry.$fShowRay_$cshowList -}
17f90caa8c8a71eac0877e519bffae7b
  $fShowRay1 :: Geometry.Ray -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Geometry.Ray) ->
                 case w of ww { Geometry.Ray ww1 ww2 ww3 ->
                 Geometry.$w$cshowsPrec 0# ww1 ww2 ww3 }) -}
2f254ebd359af21dd0c780494ef84bc8
  $fShowRay2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
e6867dd77a266ea106a2aecf310536c6
  $fShowRay3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "bounces = "#) -}
b58bed88cd6317089e78e65497873893
  $fShowRay4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "direction = "#) -}
849bf377376ca02b9ac8db15c204622a
  $fShowRay5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
c69f4579375a85796b7ef9ccba536238
  $fShowRay6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "vertex = "#) -}
de59c0c46f5ea99436ffda3a05107d14
  $fShowRay7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ray {"#) -}
17f90caa8c8a71eac0877e519bffae7b
  $fShowRay_$cshow :: Geometry.Ray -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U,U),1*U(U,U,U),U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Geometry.Ray) ->
                 Geometry.$fShowRay_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
17f90caa8c8a71eac0877e519bffae7b
  $fShowRay_$cshowList :: [Geometry.Ray] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Geometry.Ray
                   Geometry.$fShowRay1) -}
17f90caa8c8a71eac0877e519bffae7b
  $fShowRay_$cshowsPrec ::
    GHC.Types.Int -> Geometry.Ray -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U,U),1*U(U,U,U),U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Geometry.Ray) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Geometry.Ray ww3 ww4 ww5 ->
                 Geometry.$w$cshowsPrec ww1 ww3 ww4 ww5 } }) -}
7fe5b13589cf565ce636464bf4af55f3
  $fShowScene :: GHC.Show.Show Geometry.Scene
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Geometry.Scene
                  Geometry.$fShowScene_$cshowsPrec
                  Geometry.$fShowScene_$cshow
                  Geometry.$fShowScene_$cshowList -}
7fe5b13589cf565ce636464bf4af55f3
  $fShowScene1 :: Geometry.Scene -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Geometry.Scene) (w1 :: GHC.Base.String) ->
                 case w of ww { Geometry.Scene ww1 ->
                 Geometry.$w$cshowsPrec1 0# ww1 w1 }) -}
45b6b597d56ea8375b54b76b7eaa3ad4
  $fShowScene2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Triangle {"#) -}
16d67d899d44262a063abffb07a5cc53
  $fShowScene3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "material = "#) -}
7e9c07d2f2d4f019846da70f8ee1d979
  $fShowScene4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "tThird = "#) -}
69d35db1fa2d1fcea5fa50eb15e5e54d
  $fShowScene5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "tSecond = "#) -}
119dace80daf4453186b65d030720d25
  $fShowScene6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "tFirst = "#) -}
ac764d411be17ca08022cb8be1f54231
  $fShowScene7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "tris = "#) -}
7986e02e1341d6b934f61fb67818487e
  $fShowScene8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Scene {"#) -}
7fe5b13589cf565ce636464bf4af55f3
  $fShowScene_$cshow :: Geometry.Scene -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Geometry.Scene) ->
                 Geometry.$fShowScene_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7fe5b13589cf565ce636464bf4af55f3
  $fShowScene_$cshowList :: [Geometry.Scene] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Geometry.Scene
                   Geometry.$fShowScene1) -}
7fe5b13589cf565ce636464bf4af55f3
  $fShowScene_$cshowsPrec ::
    GHC.Types.Int -> Geometry.Scene -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Geometry.Scene)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Geometry.Scene ww3 ->
                 Geometry.$w$cshowsPrec1 ww1 ww3 w2 } }) -}
7fe6a2e98fc999308374d7c49f16df1e
  $fShowTriangle :: GHC.Show.Show Geometry.Triangle
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Geometry.Triangle
                  Geometry.$fShowTriangle_$cshowsPrec
                  Geometry.$fShowTriangle_$cshow
                  Geometry.$fShowTriangle_$cshowList -}
7fe6a2e98fc999308374d7c49f16df1e
  $fShowTriangle1 :: Geometry.Triangle -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Geometry.Triangle) ->
                 case w of ww { Geometry.Triangle ww1 ww2 ww3 ww4 ->
                 Geometry.$w$cshowsPrec2 0# ww1 ww2 ww3 ww4 }) -}
7fe6a2e98fc999308374d7c49f16df1e
  $fShowTriangle_$cshow :: Geometry.Triangle -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),U(U(U,U,U),U(U,U,U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Geometry.Triangle) ->
                 Geometry.$fShowTriangle_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7fe6a2e98fc999308374d7c49f16df1e
  $fShowTriangle_$cshowList :: [Geometry.Triangle] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Geometry.Triangle
                   Geometry.$fShowTriangle1) -}
7fe6a2e98fc999308374d7c49f16df1e
  $fShowTriangle_$cshowsPrec ::
    GHC.Types.Int -> Geometry.Triangle -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U,U),1*U(U,U,U),1*U(U,U,U),U(U(U,U,U),U(U,U,U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Geometry.Triangle) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Geometry.Triangle ww3 ww4 ww5 ww6 ->
                 Geometry.$w$cshowsPrec2 ww1 ww3 ww4 ww5 ww6 } }) -}
ae7efd2da3f79950ad09afc03475f2f2
  $s!_$slength :: Data.Vector.Vector GHC.Types.Float -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: [NEVER] -}
4c2b29024fe92f703d94992e2cc55f3a
  $tc'Ray :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15289956401521310186##
                   17976180280874295068##
                   Geometry.$trModule
                   Geometry.$tc'Ray1) -}
b40e11532b7a35bff86904447da1602f
  $tc'Ray1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Ray"#) -}
7dd7af05c7b9530242700d1b9a52f5b8
  $tc'Scene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9940577622601843753##
                   14153641401413129624##
                   Geometry.$trModule
                   Geometry.$tc'Scene1) -}
4b08eaa9ac3606c80ebbf04218f49bb7
  $tc'Scene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Scene"#) -}
1a4a597838136ded51457d3941e64189
  $tc'Triangle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7999705874756891783##
                   11836331471153128802##
                   Geometry.$trModule
                   Geometry.$tc'Triangle1) -}
3f6a861a6d7ca89eb2a2ed1578e86940
  $tc'Triangle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Triangle"#) -}
064a02e0f225d18677f5090ff658643d
  $tcRay :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15181165913474541651##
                   11763050582616098242##
                   Geometry.$trModule
                   Geometry.$tcRay1) -}
925e6af43159f6dfcc8f4af5679c2898
  $tcRay1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Ray"#) -}
8285df6557e58e0b9b1bdcdcda67797f
  $tcScene :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5346427931937449395##
                   16082886568178549846##
                   Geometry.$trModule
                   Geometry.$tcScene1) -}
4593326e634450241df5b275b13d2ddf
  $tcScene1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Scene"#) -}
008071d4c62b51b02575069cea386ad0
  $tcTriangle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   333584289853889510##
                   11459518277799907714##
                   Geometry.$trModule
                   Geometry.$tcTriangle1) -}
7cfdafa63147fba9548d616cdcda3786
  $tcTriangle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Triangle"#) -}
d308f4debb3ea1d37ec7abb001b01511
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Geometry.$trModule2
                   Geometry.$trModule1) -}
546ff7f42be305e2712d9a41ac3a0f9e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Geometry"#) -}
a908dfa9b4ab02599ad217f15f439c49
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "squigly-trace-0.1.0.0-5ozva8u4xtWJFkMKhtQb5C"#) -}
7ea95ef134a7d52dd7428ee8bafb6512
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Linear.V3.V3 GHC.Types.Float
    -> Linear.V3.V3 GHC.Types.Float
    -> GHC.Types.Int
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,1*U(U,U,U)><L,1*U(U,U,U)><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Linear.V3.V3 GHC.Types.Float)
                   (ww2 :: Linear.V3.V3 GHC.Types.Float)
                   (ww3 :: GHC.Types.Int) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww4 { Linear.V3.V3 ww5 ww6 ww7 ->
                     Linear.V3.$w$cshowsPrec
                       @ GHC.Types.Float
                       GHC.Float.$fShowFloat
                       0#
                       ww5
                       ww6
                       ww7 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww4 { Linear.V3.V3 ww5 ww6 ww7 ->
                     Linear.V3.$w$cshowsPrec
                       @ GHC.Types.Float
                       GHC.Float.$fShowFloat
                       0#
                       ww5
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Geometry.$fShowRay7
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Geometry.$fShowRay6
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Geometry.$fShowRay5
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Geometry.$fShowRay4
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Geometry.$fShowRay5
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Geometry.$fShowRay3
                                            (case ww3 of ww4 { GHC.Types.I# ww5 ->
                                             case GHC.Show.$wshowSignedInt
                                                    0#
                                                    ww5
                                                    (GHC.Base.++
                                                       @ GHC.Types.Char
                                                       Geometry.$fShowRay2
                                                       x) of ww6 { (#,#) ww7 ww8 ->
                                             GHC.Types.: @ GHC.Types.Char ww7 ww8 } }))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
4b5b85604b03e1b1720663370017a57f
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> [Geometry.Triangle] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [Geometry.Triangle])
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Geometry.$fShowScene8
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Geometry.$fShowScene7
                          (let {
                             s :: GHC.Base.String
                             = GHC.Base.++ @ GHC.Types.Char Geometry.$fShowRay2 x
                           } in
                           case ww1 of wild {
                             [] -> GHC.CString.unpackAppendCString# "[]"# s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__2
                                  (case x1 of ww2 { Geometry.Triangle ww3 ww4 ww5 ww6 ->
                                   Geometry.$w$cshowsPrec2
                                     0#
                                     ww3
                                     ww4
                                     ww5
                                     ww6
                                     (let {
                                        lvl88 :: [GHC.Types.Char]
                                        = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 s
                                      } in
                                      letrec {
                                        showl :: [Geometry.Triangle] -> GHC.Base.String
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds2 :: [Geometry.Triangle]) ->
                                          case ds2 of wild1 {
                                            [] -> lvl88
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.shows5
                                                 (case y of ww7 { Geometry.Triangle ww8 ww9 ww10 ww11 ->
                                                  Geometry.$w$cshowsPrec2
                                                    0#
                                                    ww8
                                                    ww9
                                                    ww10
                                                    ww11
                                                    (showl ys) }) }
                                      } in
                                      showl xs) }) }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
48d8a14705f7183dc47f21dc026b315b
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Linear.V3.V3 GHC.Types.Float
    -> Linear.V3.V3 GHC.Types.Float
    -> Linear.V3.V3 GHC.Types.Float
    -> Color.Material GHC.Types.Float
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,1*U(U,U,U)><L,1*U(U,U,U)><L,1*U(U,U,U)><L,U(U(U,U,U),U(U,U,U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Linear.V3.V3 GHC.Types.Float)
                   (ww2 :: Linear.V3.V3 GHC.Types.Float)
                   (ww3 :: Linear.V3.V3 GHC.Types.Float)
                   (ww4 :: Color.Material GHC.Types.Float) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Linear.V3.V3 ww6 ww7 ww8 ->
                     Linear.V3.$w$cshowsPrec
                       @ GHC.Types.Float
                       GHC.Float.$fShowFloat
                       0#
                       ww6
                       ww7
                       ww8 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww5 { Linear.V3.V3 ww6 ww7 ww8 ->
                     Linear.V3.$w$cshowsPrec
                       @ GHC.Types.Float
                       GHC.Float.$fShowFloat
                       0#
                       ww6
                       ww7
                       ww8 }
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = case ww3 of ww5 { Linear.V3.V3 ww6 ww7 ww8 ->
                     Linear.V3.$w$cshowsPrec
                       @ GHC.Types.Float
                       GHC.Float.$fShowFloat
                       0#
                       ww6
                       ww7
                       ww8 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Geometry.$fShowScene6
                       (f (GHC.Base.++
                             @ GHC.Types.Char
                             Geometry.$fShowRay5
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Geometry.$fShowScene5
                                (f1
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      Geometry.$fShowRay5
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Geometry.$fShowScene4
                                         (f2
                                            (GHC.Base.++
                                               @ GHC.Types.Char
                                               Geometry.$fShowRay5
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Geometry.$fShowScene3
                                                  (case ww4 of ww5 { Color.Mat ww6 ww7 ->
                                                   Color.$w$cshowsPrec
                                                     @ GHC.Types.Float
                                                     GHC.Float.$fShowFloat
                                                     0#
                                                     ww6
                                                     ww7
                                                     (GHC.Base.++
                                                        @ GHC.Types.Char
                                                        Geometry.$fShowRay2
                                                        x) }))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Geometry.$fShowScene2 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Geometry.$fShowScene2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
c02e2dd18f35d60848d4af2deb5f6200
  $wdot :: GHC.Num.Num a => a -> a -> a -> a -> a -> a -> a
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S(C(C(S))LLLLLL),U(C(C1(U)),A,C(C1(U)),A,A,A,A)><S,U><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Num.Num a)
                   (ww :: a)
                   (ww1 :: a)
                   (ww2 :: a)
                   (ww3 :: a)
                   (ww4 :: a)
                   (ww5 :: a) ->
                 GHC.Num.+
                   @ a
                   w
                   (GHC.Num.+
                      @ a
                      w
                      (GHC.Num.* @ a w ww ww3)
                      (GHC.Num.* @ a w ww1 ww4))
                   (GHC.Num.* @ a w ww2 ww5)) -}
a7e580e963c1ef2766e715d7ff91b14c
  $wgo ::
    [Data.Matrix.Matrix GHC.Types.Float]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector GHC.Types.Float
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#,
          GHC.Prim.Int#, Data.Vector.Vector GHC.Types.Float #)
  {- Arity: 7,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U><L,U(U,U,U)>,
     Inline: [0] -}
4d1b78d7500da3f13d8673faec720ff9
  $wlvl ::
    [GHC.Types.Float]
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#,
          GHC.Prim.Int#, Data.Vector.Vector GHC.Types.Float #)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Float]) ->
                 (# 3#, 3#, 0#, 0#, 3#,
                    case GHC.Magic.runRW#
                           @ 'GHC.Types.PtrRepLifted
                           @ (Data.Vector.Vector GHC.Types.Float)
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.newArray#
                                   @ GHC.Types.Float
                                   @ (Control.Monad.Primitive.PrimState
                                        (GHC.ST.ST GHC.Prim.RealWorld))
                                   9#
                                   (Data.Vector.Mutable.uninitialised @ GHC.Types.Float)
                                   s1
                                     `cast`
                                   (GHC.Prim.State#
                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                            letrec {
                              $wfoldlM'_loop :: GHC.Types.SPEC
                                                -> GHC.Prim.Int#
                                                -> [GHC.Types.Float]
                                                -> GHC.Prim.Int#
                                                -> GHC.Prim.State# GHC.Prim.RealWorld
                                                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                      GHC.Types.Int #)
                                {- Arity: 5, Strictness: <S,1*U><L,U><L,1*U><S,U><S,U>,
                                   Inline: [0] -}
                              = \ (w1 :: GHC.Types.SPEC)
                                  (ww :: GHC.Prim.Int#)
                                  (ww1 :: [GHC.Types.Float])
                                  (ww2 :: GHC.Prim.Int#)
                                  (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                case w1 of ds5 { DEFAULT ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<=# ww2 0#) of wild1 {
                                  GHC.Types.False
                                  -> case ww1 of wild2 {
                                       [] -> (# w2, GHC.Types.I# ww #)
                                       : x xs1
                                       -> case GHC.Prim.writeArray#
                                                 @ (Control.Monad.Primitive.PrimState
                                                      (GHC.ST.ST GHC.Prim.RealWorld))
                                                 @ GHC.Types.Float
                                                 ipv1
                                                 ww
                                                 x
                                                 w2
                                                   `cast`
                                                 (GHC.Prim.State#
                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                              <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                          $wfoldlM'_loop
                                            GHC.Types.SPEC
                                            (GHC.Prim.+# ww 1#)
                                            xs1
                                            (GHC.Prim.-# ww2 1#)
                                            s'#
                                              `cast`
                                            (GHC.Prim.State#
                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))_R } }
                                  GHC.Types.True -> (# w2, GHC.Types.I# ww #) } }
                            } in
                            case $wfoldlM'_loop
                                   GHC.Types.SPEC
                                   0#
                                   w
                                   9#
                                   ipv
                                     `cast`
                                   (GHC.Prim.State#
                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                           <GHC.Prim.RealWorld>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                            case ipv7 of dt5 { GHC.Types.I# dt6 ->
                            case GHC.Prim.unsafeFreezeArray#
                                   @ (Control.Monad.Primitive.PrimState
                                        (GHC.ST.ST GHC.Prim.RealWorld))
                                   @ GHC.Types.Float
                                   ipv1
                                   ipv6
                                     `cast`
                                   (GHC.Prim.State#
                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                <GHC.Prim.RealWorld>_N)))_R of ds4 { (#,#) ipv2 ipv3 ->
                            (# ipv2
                                 `cast`
                               (GHC.Prim.State#
                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                       <GHC.Prim.RealWorld>_N))_R,
                               Data.Vector.Vector
                                 @ GHC.Types.Float
                                 0#
                                 dt6
                                 ipv3 #) } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                    ipv2 } #)) -}
c8a17119a526ebd41bd732b39858d784
  $wrotMatrixRads ::
    GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> (# GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#, GHC.Prim.Int#,
          GHC.Prim.Int#, Data.Vector.Vector GHC.Types.Float #)
  {- Arity: 3, Strictness: <L,U(U)><L,U(U)><L,U(U)>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Float)
                   (w1 :: GHC.Types.Float)
                   (w2 :: GHC.Types.Float) ->
                 case Geometry.$wlvl
                        (GHC.Types.:
                           @ GHC.Types.Float
                           (case w of wild { GHC.Types.F# x ->
                            GHC.Types.F# (GHC.Prim.cosFloat# x) })
                           (GHC.Types.:
                              @ GHC.Types.Float
                              (case w of wild { GHC.Types.F# x ->
                               GHC.Types.F# (GHC.Prim.negateFloat# (GHC.Prim.sinFloat# x)) })
                              (GHC.Types.:
                                 @ GHC.Types.Float
                                 Geometry.rotMatrixRads6
                                 (GHC.Types.:
                                    @ GHC.Types.Float
                                    (case w of wild { GHC.Types.F# x ->
                                     GHC.Types.F# (GHC.Prim.sinFloat# x) })
                                    (GHC.Types.:
                                       @ GHC.Types.Float
                                       (case w of wild { GHC.Types.F# x ->
                                        GHC.Types.F# (GHC.Prim.cosFloat# x) })
                                       Geometry.rotMatrixRads2))))) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Geometry.$wgo
                   (GHC.Types.:
                      @ (Data.Matrix.Matrix GHC.Types.Float)
                      (case Geometry.$wlvl
                              (GHC.Types.:
                                 @ GHC.Types.Float
                                 (case w1 of wild { GHC.Types.F# x ->
                                  GHC.Types.F# (GHC.Prim.cosFloat# x) })
                                 (GHC.Types.:
                                    @ GHC.Types.Float
                                    Geometry.rotMatrixRads6
                                    (GHC.Types.:
                                       @ GHC.Types.Float
                                       (case w1 of wild { GHC.Types.F# x ->
                                        GHC.Types.F# (GHC.Prim.sinFloat# x) })
                                       (GHC.Types.:
                                          @ GHC.Types.Float
                                          Geometry.rotMatrixRads6
                                          (GHC.Types.:
                                             @ GHC.Types.Float
                                             Geometry.rotMatrixRads1
                                             (GHC.Types.:
                                                @ GHC.Types.Float
                                                Geometry.rotMatrixRads6
                                                (GHC.Types.:
                                                   @ GHC.Types.Float
                                                   (case w1 of wild { GHC.Types.F# x ->
                                                    GHC.Types.F#
                                                      (GHC.Prim.negateFloat#
                                                         (GHC.Prim.sinFloat# x)) })
                                                   (GHC.Types.:
                                                      @ GHC.Types.Float
                                                      Geometry.rotMatrixRads6
                                                      (GHC.Types.:
                                                         @ GHC.Types.Float
                                                         (case w1 of wild { GHC.Types.F# x ->
                                                          GHC.Types.F# (GHC.Prim.cosFloat# x) })
                                                         (GHC.Types.[]
                                                            @ GHC.Types.Float)))))))))) of ww7 { (#,,,,,#) ww8 ww9 ww10 ww11 ww12 ww13 ->
                       Data.Matrix.M @ GHC.Types.Float ww8 ww9 ww10 ww11 ww12 ww13 })
                      (GHC.Types.:
                         @ (Data.Matrix.Matrix GHC.Types.Float)
                         (case Geometry.$wlvl
                                 (GHC.Types.:
                                    @ GHC.Types.Float
                                    Geometry.rotMatrixRads1
                                    (GHC.Types.:
                                       @ GHC.Types.Float
                                       Geometry.rotMatrixRads6
                                       (GHC.Types.:
                                          @ GHC.Types.Float
                                          Geometry.rotMatrixRads6
                                          (GHC.Types.:
                                             @ GHC.Types.Float
                                             Geometry.rotMatrixRads6
                                             (GHC.Types.:
                                                @ GHC.Types.Float
                                                (case w2 of wild { GHC.Types.F# x ->
                                                 GHC.Types.F# (GHC.Prim.cosFloat# x) })
                                                (GHC.Types.:
                                                   @ GHC.Types.Float
                                                   (case w2 of wild { GHC.Types.F# x ->
                                                    GHC.Types.F#
                                                      (GHC.Prim.negateFloat#
                                                         (GHC.Prim.sinFloat# x)) })
                                                   (GHC.Types.:
                                                      @ GHC.Types.Float
                                                      Geometry.rotMatrixRads6
                                                      (GHC.Types.:
                                                         @ GHC.Types.Float
                                                         (case w2 of wild { GHC.Types.F# x ->
                                                          GHC.Types.F# (GHC.Prim.sinFloat# x) })
                                                         (GHC.Types.:
                                                            @ GHC.Types.Float
                                                            (case w2 of wild { GHC.Types.F# x ->
                                                             GHC.Types.F# (GHC.Prim.cosFloat# x) })
                                                            (GHC.Types.[]
                                                               @ GHC.Types.Float)))))))))) of ww7 { (#,,,,,#) ww8 ww9 ww10 ww11 ww12 ww13 ->
                          Data.Matrix.M @ GHC.Types.Float ww8 ww9 ww10 ww11 ww12 ww13 })
                         (GHC.Types.[] @ (Data.Matrix.Matrix GHC.Types.Float))))
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
ab420afc9586cab02a95601ce2254288
  $wrotVert ::
    GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Vector.Vector GHC.Types.Float
    -> (# GHC.Types.Float, GHC.Types.Float, GHC.Types.Float #)
  {- Arity: 9,
     Strictness: <S,U><S,U><S,U><S,1*U><S,U><L,U><L,U><L,U><L,U(U,U,U)>,
     Inline: [0] -}
17f90caa8c8a71eac0877e519bffae7b
  data Ray
    = Ray {vertex :: Linear.V3.V3 GHC.Types.Float,
           direction :: Linear.V3.V3 GHC.Types.Float,
           bounces :: GHC.Types.Int}
7fe5b13589cf565ce636464bf4af55f3
  data Scene = Scene {tris :: [Geometry.Triangle]}
7fe6a2e98fc999308374d7c49f16df1e
  data Triangle
    = Triangle {tFirst :: Linear.V3.V3 GHC.Types.Float,
                tSecond :: Linear.V3.V3 GHC.Types.Float,
                tThird :: Linear.V3.V3 GHC.Types.Float,
                material :: Color.Material GHC.Types.Float}
fc95ae8415fad1824ce9e6c848585220
  bounces :: Geometry.Ray -> GHC.Types.Int
  RecSel Left Geometry.Ray
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Geometry.Ray) ->
                 case ds of wild { Geometry.Ray ds1 ds2 ds3 -> ds3 }) -}
e39d54eda9ca6b458ca785ca13d543b0
  direction :: Geometry.Ray -> Linear.V3.V3 GHC.Types.Float
  RecSel Left Geometry.Ray
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Geometry.Ray) ->
                 case ds of wild { Geometry.Ray ds1 ds2 ds3 -> ds2 }) -}
46af55ed508dd5307e3a2a3a31bfe8d7
  dot :: GHC.Num.Num a => Linear.V3.V3 a -> Linear.V3.V3 a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))LLLLLL),U(C(C1(U)),A,C(C1(U)),A,A,A,A)><S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Linear.V3.V3 a)
                   (w2 :: Linear.V3.V3 a) ->
                 case w1 of ww { Linear.V3.V3 ww1 ww2 ww3 ->
                 case w2 of ww4 { Linear.V3.V3 ww5 ww6 ww7 ->
                 Geometry.$wdot @ a w ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
6d8dc4878dc7a581fb5424bd224d484f
  material :: Geometry.Triangle -> Color.Material GHC.Types.Float
  RecSel Left Geometry.Triangle
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLS),1*U(A,A,A,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Geometry.Triangle) ->
                 case ds of wild { Geometry.Triangle ds1 ds2 ds3 ds4 -> ds4 }) -}
bca207146560a6334e66dee09d048531
  normal :: Geometry.Triangle -> Linear.V3.V3 GHC.Types.Float
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(SSS)S(SSS)S(SSS)L),1*U(1*U(U(U),U(U),U(U)),1*U(U(U),U(U),U(U)),1*U(U(U),U(U),U(U)),A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Geometry.Triangle) ->
                 case w of ww { Geometry.Triangle ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Linear.V3.V3 ww6 ww7 ww8 ->
                 case ww6 of ww9 { GHC.Types.F# ww10 ->
                 case ww7 of ww11 { GHC.Types.F# ww12 ->
                 case ww8 of ww13 { GHC.Types.F# ww14 ->
                 case ww2 of ww15 { Linear.V3.V3 ww16 ww17 ww18 ->
                 case ww16 of ww19 { GHC.Types.F# ww20 ->
                 case ww17 of ww21 { GHC.Types.F# ww22 ->
                 case ww18 of ww23 { GHC.Types.F# ww24 ->
                 case ww3 of ww25 { Linear.V3.V3 ww26 ww27 ww28 ->
                 case ww26 of ww29 { GHC.Types.F# ww30 ->
                 case ww27 of ww31 { GHC.Types.F# ww32 ->
                 case ww28 of ww33 { GHC.Types.F# ww34 ->
                 let {
                   dt5 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww34 ww14
                 } in
                 let {
                   dt4 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww32 ww12
                 } in
                 let {
                   dt3 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww30 ww10
                 } in
                 let {
                   dt1 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww24 ww14
                 } in
                 let {
                   dt2 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww22 ww12
                 } in
                 let {
                   dt6 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww20 ww10
                 } in
                 Linear.V3.V3
                   @ GHC.Types.Float
                   (GHC.Types.F#
                      (GHC.Prim.minusFloat#
                         (GHC.Prim.timesFloat# dt2 dt5)
                         (GHC.Prim.timesFloat# dt1 dt4)))
                   (GHC.Types.F#
                      (GHC.Prim.minusFloat#
                         (GHC.Prim.timesFloat# dt1 dt3)
                         (GHC.Prim.timesFloat# dt6 dt5)))
                   (GHC.Types.F#
                      (GHC.Prim.minusFloat#
                         (GHC.Prim.timesFloat# dt6 dt4)
                         (GHC.Prim.timesFloat# dt2 dt3))) } } } } } } } } } } } } }) -}
1a47b30f24f06ad2e0118ce6560429f5
  pointInTriangle ::
    Linear.V3.V3 GHC.Types.Float -> Geometry.Triangle -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)),1*U(U(U),U(U),U(U))><S(S(S(S)S(S)S(S))S(S(S)S(S)S(S))S(SSS)L),1*U(U(U(U),U(U),U(U)),U(U(U),U(U),U(U)),U(U(U),U(U),U(U)),A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Linear.V3.V3 GHC.Types.Float) (w1 :: Geometry.Triangle) ->
                 case w of ww { Linear.V3.V3 ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.F# ww5 ->
                 case ww2 of ww6 { GHC.Types.F# ww7 ->
                 case ww3 of ww8 { GHC.Types.F# ww9 ->
                 case w1 of ww10 { Geometry.Triangle ww11 ww12 ww13 ww14 ->
                 case ww11 of ww15 { Linear.V3.V3 ww16 ww17 ww18 ->
                 case ww16 of ww19 { GHC.Types.F# ww20 ->
                 case ww17 of ww21 { GHC.Types.F# ww22 ->
                 case ww18 of ww23 { GHC.Types.F# ww24 ->
                 case ww12 of ww25 { Linear.V3.V3 ww26 ww27 ww28 ->
                 case ww26 of ww29 { GHC.Types.F# ww30 ->
                 case ww27 of ww31 { GHC.Types.F# ww32 ->
                 case ww28 of ww33 { GHC.Types.F# ww34 ->
                 case ww13 of ww35 { Linear.V3.V3 ww36 ww37 ww38 ->
                 case ww36 of ww39 { GHC.Types.F# ww40 ->
                 case ww37 of ww41 { GHC.Types.F# ww42 ->
                 case ww38 of ww43 { GHC.Types.F# ww44 ->
                 let {
                   dt5 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww44 ww24
                 } in
                 let {
                   dt4 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww42 ww22
                 } in
                 let {
                   dt3 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww40 ww20
                 } in
                 let {
                   dt1 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww34 ww24
                 } in
                 let {
                   dt2 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww32 ww22
                 } in
                 let {
                   dt6 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww30 ww20
                 } in
                 let {
                   ww45 :: GHC.Prim.Float#
                   = GHC.Prim.minusFloat#
                       (GHC.Prim.timesFloat# dt2 dt5)
                       (GHC.Prim.timesFloat# dt1 dt4)
                 } in
                 let {
                   ww46 :: GHC.Prim.Float#
                   = GHC.Prim.minusFloat#
                       (GHC.Prim.timesFloat# dt1 dt3)
                       (GHC.Prim.timesFloat# dt6 dt5)
                 } in
                 let {
                   ww47 :: GHC.Prim.Float#
                   = GHC.Prim.minusFloat#
                       (GHC.Prim.timesFloat# dt6 dt4)
                       (GHC.Prim.timesFloat# dt2 dt3)
                 } in
                 let {
                   dt7 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww9 ww24
                 } in
                 let {
                   dt8 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww7 ww22
                 } in
                 let {
                   dt9 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww5 ww20
                 } in
                 let {
                   dt10 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww34 ww24
                 } in
                 let {
                   dt11 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww32 ww22
                 } in
                 let {
                   dt12 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww30 ww20
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.gtFloat#
                           (GHC.Prim.plusFloat#
                              (GHC.Prim.plusFloat#
                                 (GHC.Prim.timesFloat#
                                    (GHC.Prim.minusFloat#
                                       (GHC.Prim.timesFloat# dt11 dt7)
                                       (GHC.Prim.timesFloat# dt10 dt8))
                                    ww45)
                                 (GHC.Prim.timesFloat#
                                    (GHC.Prim.minusFloat#
                                       (GHC.Prim.timesFloat# dt10 dt9)
                                       (GHC.Prim.timesFloat# dt12 dt7))
                                    ww46))
                              (GHC.Prim.timesFloat#
                                 (GHC.Prim.minusFloat#
                                    (GHC.Prim.timesFloat# dt12 dt8)
                                    (GHC.Prim.timesFloat# dt11 dt9))
                                 ww47))
                           0.0#) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> let {
                        dt13 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww9 ww34
                      } in
                      let {
                        dt14 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww7 ww32
                      } in
                      let {
                        dt15 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww5 ww30
                      } in
                      let {
                        dt16 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww44 ww34
                      } in
                      let {
                        dt17 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww42 ww32
                      } in
                      let {
                        dt18 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww40 ww30
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.gtFloat#
                                (GHC.Prim.plusFloat#
                                   (GHC.Prim.plusFloat#
                                      (GHC.Prim.timesFloat#
                                         (GHC.Prim.minusFloat#
                                            (GHC.Prim.timesFloat# dt17 dt13)
                                            (GHC.Prim.timesFloat# dt16 dt14))
                                         ww45)
                                      (GHC.Prim.timesFloat#
                                         (GHC.Prim.minusFloat#
                                            (GHC.Prim.timesFloat# dt16 dt15)
                                            (GHC.Prim.timesFloat# dt18 dt13))
                                         ww46))
                                   (GHC.Prim.timesFloat#
                                      (GHC.Prim.minusFloat#
                                         (GHC.Prim.timesFloat# dt18 dt14)
                                         (GHC.Prim.timesFloat# dt17 dt15))
                                      ww47))
                                0.0#) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> let {
                             dt19 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww9 ww44
                           } in
                           let {
                             dt20 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww7 ww42
                           } in
                           let {
                             dt21 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww5 ww40
                           } in
                           let {
                             dt22 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww24 ww44
                           } in
                           let {
                             dt23 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww22 ww42
                           } in
                           let {
                             dt24 :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww20 ww40
                           } in
                           GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.gtFloat#
                                (GHC.Prim.plusFloat#
                                   (GHC.Prim.plusFloat#
                                      (GHC.Prim.timesFloat#
                                         (GHC.Prim.minusFloat#
                                            (GHC.Prim.timesFloat# dt23 dt19)
                                            (GHC.Prim.timesFloat# dt22 dt20))
                                         ww45)
                                      (GHC.Prim.timesFloat#
                                         (GHC.Prim.minusFloat#
                                            (GHC.Prim.timesFloat# dt22 dt21)
                                            (GHC.Prim.timesFloat# dt24 dt19))
                                         ww46))
                                   (GHC.Prim.timesFloat#
                                      (GHC.Prim.minusFloat#
                                         (GHC.Prim.timesFloat# dt24 dt20)
                                         (GHC.Prim.timesFloat# dt23 dt21))
                                      ww47))
                                0.0#) } } } } } } } } } } } } } } } } } } }) -}
99b7cff83c9a29e62060b783e340881c
  rayFromVerts ::
    Linear.V3.V3 GHC.Types.Float
    -> Linear.V3.V3 GHC.Types.Float -> Geometry.Ray
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(U),U(U),U(U))><L,1*U(U(U),U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Linear.V3.V3 GHC.Types.Float)
                   (w1 :: Linear.V3.V3 GHC.Types.Float) ->
                 Geometry.Ray
                   w
                   (case w1 of ww { Linear.V3.V3 ww1 ww2 ww3 ->
                    case w of ww4 { Linear.V3.V3 ww5 ww6 ww7 ->
                    case ww1 of wild { GHC.Types.F# x ->
                    case ww5 of wild1 { GHC.Types.F# y ->
                    case ww2 of wild2 { GHC.Types.F# x1 ->
                    case ww6 of wild3 { GHC.Types.F# y1 ->
                    case ww3 of wild4 { GHC.Types.F# x2 ->
                    case ww7 of wild5 { GHC.Types.F# y2 ->
                    Linear.V3.V3
                      @ GHC.Types.Float
                      (GHC.Types.F# (GHC.Prim.minusFloat# x y))
                      (GHC.Types.F# (GHC.Prim.minusFloat# x1 y1))
                      (GHC.Types.F# (GHC.Prim.minusFloat# x2 y2)) } } } } } } } })
                   Geometry.rayFromVerts1) -}
2afaa9302035f7c74237be9479e7d511
  rayFromVerts1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
bf3df32738ffdd56712b6349da31716d
  rotMatrixRads ::
    GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> Data.Matrix.Matrix GHC.Types.Float
  {- Arity: 3, Strictness: <L,U(U)><L,U(U)><L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Float)
                   (w1 :: GHC.Types.Float)
                   (w2 :: GHC.Types.Float) ->
                 case Geometry.$wrotMatrixRads
                        w
                        w1
                        w2 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Data.Matrix.M @ GHC.Types.Float ww1 ww2 ww3 ww4 ww5 ww6 }) -}
fe64efc49464c3b058a822b9b31adbd6
  rotMatrixRads1 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 1.0#) -}
94ee6f43b9c591ef1ed5be2847e97788
  rotMatrixRads2 :: [GHC.Types.Float]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Float
                   Geometry.rotMatrixRads6
                   Geometry.rotMatrixRads3) -}
641254652ebc5615a2d3ed20350feb32
  rotMatrixRads3 :: [GHC.Types.Float]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Float
                   Geometry.rotMatrixRads6
                   Geometry.rotMatrixRads4) -}
d00f6cc8ce084030ada59664e343abef
  rotMatrixRads4 :: [GHC.Types.Float]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Float
                   Geometry.rotMatrixRads6
                   Geometry.rotMatrixRads5) -}
967003d57f3699bf267238be9aeb5495
  rotMatrixRads5 :: [GHC.Types.Float]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Float
                   Geometry.rotMatrixRads1
                   (GHC.Types.[] @ GHC.Types.Float)) -}
8e6871ac45c606df6034c7c68f3146ad
  rotMatrixRads6 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
e083f6c3566dfe00b02b6c44facbf333
  rotVert ::
    Linear.V3.V3 GHC.Types.Float
    -> Data.Matrix.Matrix GHC.Types.Float
    -> Linear.V3.V3 GHC.Types.Float
  {- Arity: 2,
     Strictness: <S(SSS),1*U(U,U,U)><S(SSLLLL),1*U(1*U,U,U,U,U,U(U,U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Linear.V3.V3 GHC.Types.Float)
                   (w1 :: Data.Matrix.Matrix GHC.Types.Float) ->
                 case w of ww { Linear.V3.V3 ww1 ww2 ww3 ->
                 case w1 of ww4 { Data.Matrix.M ww5 ww6 ww7 ww8 ww9 ww10 ->
                 case Geometry.$wrotVert
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10 of ww11 { (#,,#) ww12 ww13 ww14 ->
                 Linear.V3.V3 @ GHC.Types.Float ww12 ww13 ww14 } } }) -}
a5b014f3e1505ddda37bde130977517a
  rotate ::
    GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> Linear.V3.V3 GHC.Types.Float
    -> Linear.V3.V3 GHC.Types.Float
  {- Arity: 4,
     Strictness: <L,U(U)><L,U(U)><L,U(U)><S(SSS),1*U(U,U,U)>m,
     Unfolding: InlineRule (4, True, False)
                (\ (alp :: GHC.Types.Float)
                   (bet :: GHC.Types.Float)
                   (gam :: GHC.Types.Float)
                   (vert :: Linear.V3.V3 GHC.Types.Float) ->
                 Geometry.rotVert vert (Geometry.rotMatrixRads alp bet gam)) -}
4c446ea0bc570ac8300f7a75e3081f41
  tFirst :: Geometry.Triangle -> Linear.V3.V3 GHC.Types.Float
  RecSel Left Geometry.Triangle
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U,U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Geometry.Triangle) ->
                 case ds of wild { Geometry.Triangle ds1 ds2 ds3 ds4 -> ds1 }) -}
880098ffda81426f21c6b6c958f429ad
  tSecond :: Geometry.Triangle -> Linear.V3.V3 GHC.Types.Float
  RecSel Left Geometry.Triangle
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Geometry.Triangle) ->
                 case ds of wild { Geometry.Triangle ds1 ds2 ds3 ds4 -> ds2 }) -}
4b26867e30310483597a3561272550ee
  tThird :: Geometry.Triangle -> Linear.V3.V3 GHC.Types.Float
  RecSel Left Geometry.Triangle
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Geometry.Triangle) ->
                 case ds of wild { Geometry.Triangle ds1 ds2 ds3 ds4 -> ds3 }) -}
fd252227d499a5885aac93c396844063
  tris :: Geometry.Scene -> [Geometry.Triangle]
  RecSel Left Geometry.Scene
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Geometry.Scene) ->
                 case ds of wild { Geometry.Scene ds1 -> ds1 }) -}
c1cbab48ac23efadc5354f3d4d6adde3
  vertex :: Geometry.Ray -> Linear.V3.V3 GHC.Types.Float
  RecSel Left Geometry.Ray
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Geometry.Ray) ->
                 case ds of wild { Geometry.Ray ds1 ds2 ds3 -> ds1 }) -}
instance GHC.Show.Show [Geometry.Ray] = Geometry.$fShowRay
instance GHC.Show.Show [Geometry.Scene] = Geometry.$fShowScene
instance GHC.Show.Show [Geometry.Triangle]
  = Geometry.$fShowTriangle
"SPEC/Geometry length @ Vector @ Float" [ALWAYS] forall ($dVector :: Data.Vector.Generic.Base.Vector
                                                                       Data.Vector.Vector
                                                                       GHC.Types.Float)
  Data.Vector.Generic.length @ Data.Vector.Vector
                             @ GHC.Types.Float
                             $dVector
  = Geometry.$s!_$slength
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

